install.packages("caret")
install.packages("devtool")
install.packages("devtools")
devtools::install_github("twitter/AnomalyDetection")
install.packages("randomForest")
install.packages("xgboost")
install.packages("doMS")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("data.table")
devtools::install_github("twitter/AnomalyDetection")
require("AnomalyDetection")
data(raw_data)
res = AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', plot=TRUE)
res$plot
AnomalyDetectionVec(raw_data[,2], max_anoms=0.02, period=1440, direction='both', only_last=FALSE, plot=TRUE)
View(raw_data)
res = AnomalyDetectionTs(raw_data, max_anoms=0.02, direction='both', only_last="day", plot=TRUE)
res$plot
str(res)
install.packages("doSMP")
require(doSMP)
install.packages("foreach")
install.packages("doParalle")
install.packages("doParallel")
install.packages("doSNOW")
require(doSNOW)
require(foreach)
registerDoSNOW(4)
l = foreach(i=1:10000) %dopar% sqrt(i)
1/2
path
m<<-3
m
x <-- 3
x
a=10
f <-function (x) {}
f <- function (x) {
x<- x*2
x
}
f(a)
a
c(1,2,3)
install.packages("survival")
install.packages("KMsurv")
library(Ksurv)
library(KMsurv)
source('~/.active-rstudio-document')
system.time({ 1 +1})
# Set MKL threads if Revolution R Open or Revolution R Enterprise is available
if(require("RevoUtilsMath")){
setMKLthreads(4)
}
# Initialization
set.seed (1)
m <- 10000
n <-  5000
A <- matrix (runif (m*n),m,n)
# Matrix multiply
system.time (B <- crossprod(A))
# Cholesky Factorization
system.time (C <- chol(B))
# Singular Value Deomposition
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (S <- svd (A,nu=0,nv=0))
# Principal Components Analysis
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (P <- prcomp(A))
# Linear Discriminant Analysis
library('MASS')
g <- 5
k <- round (m/2)
A <- data.frame (A, fac=sample (LETTERS[1:g],m,replace=TRUE))
train <- sample(1:m, k)
system.time (L <- lda(fac ~., data=A, prior=rep(1,g)/g, subset=train))
install.packages("revoutilsmath")
# Set MKL threads if Revolution R Open or Revolution R Enterprise is available
if(require("RevoUtilsMath")){
setMKLthreads(4)
}
# Initialization
set.seed (1)
m <- 10000
n <-  5000
A <- matrix (runif (m*n),m,n)
# Matrix multiply
system.time (B <- crossprod(A))
install.packages("revoutilsmath")
install.packages("checkpoint", repos = "http://mran.revolutionanalytics.com/snapshot/2015-04-29")
install.packages("revoutilsmath")
# Set MKL threads if Revolution R Open or Revolution R Enterprise is available
if(require("RevoUtilsMath")){
setMKLthreads(4)
}
# Initialization
set.seed (1)
m <- 10000
n <-  5000
A <- matrix (runif (m*n),m,n)
# Matrix multiply
system.time (B <- crossprod(A))
# Cholesky Factorization
system.time (C <- chol(B))
# Singular Value Deomposition
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (S <- svd (A,nu=0,nv=0))
# Principal Components Analysis
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (P <- prcomp(A))
# Linear Discriminant Analysis
library('MASS')
g <- 5
k <- round (m/2)
A <- data.frame (A, fac=sample (LETTERS[1:g],m,replace=TRUE))
train <- sample(1:m, k)
system.time (L <- lda(fac ~., data=A, prior=rep(1,g)/g, subset=train))
# Set MKL threads if Revolution R Open or Revolution R Enterprise is available
if(require("RevoUtilsMath")){
setMKLthreads(1)
}
# Initialization
set.seed (1)
m <- 10000
n <-  5000
A <- matrix (runif (m*n),m,n)
# Matrix multiply
system.time (B <- crossprod(A))
# Cholesky Factorization
system.time (C <- chol(B))
# Singular Value Deomposition
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (S <- svd (A,nu=0,nv=0))
# Principal Components Analysis
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (P <- prcomp(A))
# Linear Discriminant Analysis
library('MASS')
g <- 5
k <- round (m/2)
A <- data.frame (A, fac=sample (LETTERS[1:g],m,replace=TRUE))
train <- sample(1:m, k)
system.time (L <- lda(fac ~., data=A, prior=rep(1,g)/g, subset=train))
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- makeCluster(spec = rep("localhost", 4),
type = "PSOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- makeCluster(spec = rep("localhost", 4),
type = "PSOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
cluster
cluster
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
chains <- 4
cluster <- makeCluster(spec = chains,
type = "MPI")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
list.modules
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- NA
chains <- 4
cluster <- makeCluster(spec = chains,
type = "PVM")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- NA
chains <- 4
cluster <- makeCluster(spec = chains,
type = "SOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
library('dclone')
library('rjags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- NA
chains <- 4
cluster <- makeCluster(spec = chains,
type = "SOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
stopCluster(cluster)
summary(m)
setwd("~/GitHub/Spikes/rjags")
library('dclone')
library('rjags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- NA
chains <- 4
cluster <- makeCluster(spec = chains,
type = "SOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
stopCluster(cluster)
summary(m)
library('dclone')
library('rjags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- NA
chains <- 4
cluster <- makeCluster(spec = chains,
type = "SOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
stopCluster(cluster)
summary(m)
library('dclone')
library('rjags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- NA
chains <- 8
nodes <- 4
cluster <- makeCluster(spec = nodes,
type = "SOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
stopCluster(cluster)
summary(m)
library('dclone')
library('rjags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- NA
chains <- 8
nodes <- 4
cluster <- makeCluster(spec = nodes,
type = "SOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
stopCluster(cluster)
summary(m)
library('dclone')
library('rjags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- NA
chains <- 8
nodes <- 4
cluster <- makeCluster(spec = nodes,
type = "SOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
stopCluster(cluster)
install.packages("rmpi")
install.packages("Rmpi")
library('dclone')
library('rjags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- NA
chains <- 8
nodes <- 4
# cluster <- makeCluster(spec = nodes,
#                        type = "SOCK")
cluster <- makeCluster(spec = nodes,
type = "MPI")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
stopCluster(cluster)
install.packages("Rmpi")
library(Rmpi)
install.packages("doMPI")
