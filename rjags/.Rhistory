registerDoSNOW(4)
l = foreach(i=1:10000) %dopar% sqrt(i)
1/2
path
m<<-3
m
x <-- 3
x
a=10
f <-function (x) {}
f <- function (x) {
x<- x*2
x
}
f(a)
a
c(1,2,3)
install.packages("survival")
install.packages("KMsurv")
library(Ksurv)
library(KMsurv)
source('~/.active-rstudio-document')
system.time({ 1 +1})
# Set MKL threads if Revolution R Open or Revolution R Enterprise is available
if(require("RevoUtilsMath")){
setMKLthreads(4)
}
# Initialization
set.seed (1)
m <- 10000
n <-  5000
A <- matrix (runif (m*n),m,n)
# Matrix multiply
system.time (B <- crossprod(A))
# Cholesky Factorization
system.time (C <- chol(B))
# Singular Value Deomposition
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (S <- svd (A,nu=0,nv=0))
# Principal Components Analysis
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (P <- prcomp(A))
# Linear Discriminant Analysis
library('MASS')
g <- 5
k <- round (m/2)
A <- data.frame (A, fac=sample (LETTERS[1:g],m,replace=TRUE))
train <- sample(1:m, k)
system.time (L <- lda(fac ~., data=A, prior=rep(1,g)/g, subset=train))
install.packages("revoutilsmath")
# Set MKL threads if Revolution R Open or Revolution R Enterprise is available
if(require("RevoUtilsMath")){
setMKLthreads(4)
}
# Initialization
set.seed (1)
m <- 10000
n <-  5000
A <- matrix (runif (m*n),m,n)
# Matrix multiply
system.time (B <- crossprod(A))
install.packages("revoutilsmath")
install.packages("checkpoint", repos = "http://mran.revolutionanalytics.com/snapshot/2015-04-29")
install.packages("revoutilsmath")
# Set MKL threads if Revolution R Open or Revolution R Enterprise is available
if(require("RevoUtilsMath")){
setMKLthreads(4)
}
# Initialization
set.seed (1)
m <- 10000
n <-  5000
A <- matrix (runif (m*n),m,n)
# Matrix multiply
system.time (B <- crossprod(A))
# Cholesky Factorization
system.time (C <- chol(B))
# Singular Value Deomposition
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (S <- svd (A,nu=0,nv=0))
# Principal Components Analysis
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (P <- prcomp(A))
# Linear Discriminant Analysis
library('MASS')
g <- 5
k <- round (m/2)
A <- data.frame (A, fac=sample (LETTERS[1:g],m,replace=TRUE))
train <- sample(1:m, k)
system.time (L <- lda(fac ~., data=A, prior=rep(1,g)/g, subset=train))
# Set MKL threads if Revolution R Open or Revolution R Enterprise is available
if(require("RevoUtilsMath")){
setMKLthreads(1)
}
# Initialization
set.seed (1)
m <- 10000
n <-  5000
A <- matrix (runif (m*n),m,n)
# Matrix multiply
system.time (B <- crossprod(A))
# Cholesky Factorization
system.time (C <- chol(B))
# Singular Value Deomposition
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (S <- svd (A,nu=0,nv=0))
# Principal Components Analysis
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (P <- prcomp(A))
# Linear Discriminant Analysis
library('MASS')
g <- 5
k <- round (m/2)
A <- data.frame (A, fac=sample (LETTERS[1:g],m,replace=TRUE))
train <- sample(1:m, k)
system.time (L <- lda(fac ~., data=A, prior=rep(1,g)/g, subset=train))
install.packages("r2jags")
install.packages("R2jags")
?R2jags
setwd("~/GitHub/Spikes/rjags")
library('R2jags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- jags.model('7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000)
system.time( { samples <- jags(m,
c("mu", "sigma"),
30000)
} )
summary(samples)
?jags.model
for (i in 1:4) {
x_init [j] = list(mu = i, sigma = rep(i/10, 7))
}
x_init = list()
for (i in 1:4) {
x_init [j] = list(mu = i, sigma = rep(i/10, 7))
}
x_init = rep(list(), 4)
for (i in 1:4) {
x_init [i] = list(mu = i, sigma = rep(i/10, 7))
}
x_init = rep(NA, 4)
for (i in 1:4) {
x_init [i] = list(mu = i, sigma = rep(i/10, 7))
}
x_init
str(x_init)
x_init[1]
list(mu=1, sigma=rep(1/10,7))
?lapply
x_init = lapply(1:4, function (i) { list(mu = i, sigma = rep(i/10, 7)) })
x_init[1]
x_init
library('R2jags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
x_init = lapply(1:4, function (i) { list(mu = i, sigma = rep(i/10, 7)) })
m <- jags.model('7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
inits = x_init,
n.adapt = 1000)
system.time( { samples <- jags(m,
c("mu", "sigma"),
30000)
} )
summary(samples)
length(x_init)
library('R2jags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
chains = 4
x_init = lapply(1:chains, function (i) { list(mu = i, sigma = rep(i/10, 7)) })
m <- jags.model('7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
inits = x_init,
n.adapt = 1000)
system.time( { samples <- jags(m,
n.chains   = chains,
c("mu", "sigma"),
30000)
} )
summary(samples)
m <- jags (model.file = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
inits = x_init,
n.iter = 1000,
parameters.to.save = c("mu", "sigma") )
summary(m)
plot(m)
m.BUGSoutput
m$BUGSoutput
library('R2jags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
chains = 4
x_init = lapply(1:chains, function (i) { list(mu = i, sigma = rep(i/10, 7)) })
m <- jags (model.file = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
inits = x_init,
n.iter = 10000,
parameters.to.save = c("mu", "sigma") )
summary(m)
library('R2jags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
chains = 4
x_init = lapply(1:chains, function (i) { list(mu = i, sigma = rep(i/10, 7)) })
m <- jags (model.file = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
inits = x_init,
n.iter = 50000,
parameters.to.save = c("mu", "sigma") )
summary(m)
m$BUGSoutput
library('R2jags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
chains = 4
x_init = lapply(1:chains, function (i) { list(mu = i, sigma = rep(i/10, 7)) })
m <- jags (model.file = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
inits = x_init,
n.iter = 100000,
parameters.to.save = c("mu", "sigma") )
m$BUGSoutput
library('R2jags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
chains = 4
x_init = lapply(1:chains, function (i) { list(mu = i, sigma = rep(i/10, 7)) })
m <- jags.parallel (model.file = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
inits = x_init,
n.iter = 100000,
parameters.to.save = c("mu", "sigma") )
m$BUGSoutput
.GlobalEnv
library('R2jags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
chains = 4
x_init = lapply(1:chains, function (i) { list(mu = i, sigma = rep(i/10, 7)) })
m <- jags.parallel (model.file = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
inits = x_init,
n.iter = 100000,
parameters.to.save = c("mu", "sigma") )
m$BUGSoutput
library('R2jags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
chains = 4
x_init = lapply(1:chains, function (i) { list(mu = i, sigma = rep(i/10, 7)) })
m <- jags.parallel (model.file = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
inits = x_init,
n.iter = 100000,
parameters.to.save = c("mu", "sigma") )
m$BUGSoutput
print(m)
N <- 2000
x <- 1:N
epsilon <- rnorm(N, 0, 10)
y <- 2 * x + 1 + epsilon
library('R2jags')
chains = 4
x_init = lapply(1:chains, function (i) { list(a = i/10, b = i/10) })
m <- jags.parallel (model.file = 'example2.bug',
data = list('x' = x,
"y" = y,
'N' = N),
n.chains = chains,
inits = x_init,
n.iter = 10000,
parameters.to.save = c("a", "b") )
print(m)
N <- 2000
x <- 1:N
epsilon <- rnorm(N, 0, 10)
y <- 2 * x + 1 + epsilon
library('R2jags')
chains = 4
x_init = lapply(1:chains, function (i) { list(a = i/10, b = i/10) })
m <- jags.parallel (model.file = 'example2.bug',
data = list('x' = x,
"y" = y,
'N' = N),
n.chains = chains,
inits = x_init,
n.iter = 100000,
parameters.to.save = c("a", "b") )
print(m)
m <- jags.parallel (model.file = 'example2.bug',
data = list('x' = x,
"y" = y,
'N' = N),
n.chains = chains,
inits = x_init,
n.iter = 100000,
parameters.to.save = c("a", "b") )
install.packages("dclone")
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
jags <- jags.model('7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000)
system.time( { samples <- coda.samples(jags,
c("mu", "sigma"),
30000)
} )
plot(samples)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
jags <- jags.model('7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000)
system.time( { samples <- coda.samples(jags,
c("mu", "sigma"),
30000)
} )
summary(samples)
?coda.samples
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
jags <- jags.model('7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000)
system.time( { samples <- jags.parfit(jags,
c("mu", "sigma"),
30000)
} )
summary(samples)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- jags.parfit('7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 30000)
summary(m)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- jags.parfit(model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 30000)
summary(m)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- jags.fit(model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 30000)
summary(m)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- jags.parfit(cl = 4,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 30000)
summary(m)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- makeCluster(spec = 4,
type = "SOCKS")
m <- jags.parfit(cl = 4,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 30000)
summary(m)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- makeCluster(spec = rep("localhost", 4),
type = "SOCKS")
m <- jags.parfit(cl = 4,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 30000)
summary(m)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- makeCluster(spec = rep("localhost", 4),
type = "SOCKS")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 30000)
summary(m)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- makeCluster(spec = rep("localhost", 4),
type = "PSOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 30000)
summary(m)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- makeCluster(spec = rep("localhost", 4),
type = "PSOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
install.package("snow")
install.packages("snow")
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- makeCluster(spec = rep("localhost", 4),
type = "PSOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
