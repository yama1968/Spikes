g <- 5
k <- round (m/2)
A <- data.frame (A, fac=sample (LETTERS[1:g],m,replace=TRUE))
train <- sample(1:m, k)
system.time (L <- lda(fac ~., data=A, prior=rep(1,g)/g, subset=train))
install.packages("revoutilsmath")
# Set MKL threads if Revolution R Open or Revolution R Enterprise is available
if(require("RevoUtilsMath")){
setMKLthreads(4)
}
# Initialization
set.seed (1)
m <- 10000
n <-  5000
A <- matrix (runif (m*n),m,n)
# Matrix multiply
system.time (B <- crossprod(A))
install.packages("revoutilsmath")
install.packages("checkpoint", repos = "http://mran.revolutionanalytics.com/snapshot/2015-04-29")
install.packages("revoutilsmath")
# Set MKL threads if Revolution R Open or Revolution R Enterprise is available
if(require("RevoUtilsMath")){
setMKLthreads(4)
}
# Initialization
set.seed (1)
m <- 10000
n <-  5000
A <- matrix (runif (m*n),m,n)
# Matrix multiply
system.time (B <- crossprod(A))
# Cholesky Factorization
system.time (C <- chol(B))
# Singular Value Deomposition
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (S <- svd (A,nu=0,nv=0))
# Principal Components Analysis
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (P <- prcomp(A))
# Linear Discriminant Analysis
library('MASS')
g <- 5
k <- round (m/2)
A <- data.frame (A, fac=sample (LETTERS[1:g],m,replace=TRUE))
train <- sample(1:m, k)
system.time (L <- lda(fac ~., data=A, prior=rep(1,g)/g, subset=train))
# Set MKL threads if Revolution R Open or Revolution R Enterprise is available
if(require("RevoUtilsMath")){
setMKLthreads(1)
}
# Initialization
set.seed (1)
m <- 10000
n <-  5000
A <- matrix (runif (m*n),m,n)
# Matrix multiply
system.time (B <- crossprod(A))
# Cholesky Factorization
system.time (C <- chol(B))
# Singular Value Deomposition
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (S <- svd (A,nu=0,nv=0))
# Principal Components Analysis
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (P <- prcomp(A))
# Linear Discriminant Analysis
library('MASS')
g <- 5
k <- round (m/2)
A <- data.frame (A, fac=sample (LETTERS[1:g],m,replace=TRUE))
train <- sample(1:m, k)
system.time (L <- lda(fac ~., data=A, prior=rep(1,g)/g, subset=train))
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- makeCluster(spec = rep("localhost", 4),
type = "PSOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- makeCluster(spec = rep("localhost", 4),
type = "PSOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
cluster
cluster
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
chains <- 4
cluster <- makeCluster(spec = chains,
type = "MPI")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
list.modules
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- NA
chains <- 4
cluster <- makeCluster(spec = chains,
type = "PVM")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
library('dclone')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- NA
chains <- 4
cluster <- makeCluster(spec = chains,
type = "SOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = chains,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
summary(m)
library('dclone')
library('rjags')
x <- c(-27.020,3.570,8.191,9.898,9.603,9.945,10.056)
n <- length(x)
m <- NA
cluster <- NA
chains <- 4
cluster <- makeCluster(spec = chains,
type = "SOCK")
m <- jags.parfit(cl = cluster,
model = '7scientists2.bug',
data = list('x' = x,
'n' = n),
n.chains = 4,
n.adapt = 1000,
params = c("mu", "sigma"),
n.iter = 100000)
stopCluster(cluster)
summary(m)
source('~/.active-rstudio-document')
?install.packages
source('~/.active-rstudio-document')
installed.packages()
source('~/GitHub/Spikes/my_packages.R')
source('~/GitHub/Spikes/my_packages.R')
p
source('~/GitHub/Spikes/R/revoutilsbench.R')
# Set MKL threads if Revolution R Open or Revolution R Enterprise is available
if(require("RevoUtilsMath")){
setMKLthreads(8)
}
# Initialization
set.seed (1)
m <- 10000
n <-  5000
A <- matrix (runif (m*n),m,n)
# Matrix multiply
system.time (B <- crossprod(A))
# Cholesky Factorization
system.time (C <- chol(B))
# Singular Value Deomposition
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (S <- svd (A,nu=0,nv=0))
# Principal Components Analysis
m <- 10000
n <- 2000
A <- matrix (runif (m*n),m,n)
system.time (P <- prcomp(A))
# Linear Discriminant Analysis
library('MASS')
g <- 5
k <- round (m/2)
A <- data.frame (A, fac=sample (LETTERS[1:g],m,replace=TRUE))
train <- sample(1:m, k)
system.time (L <- lda(fac ~., data=A, prior=rep(1,g)/g, subset=train))
??survival
?survival
install.packages("ggmcmc")
?ggmcmc
??ggmcmc
library('dclone')
library('rjags')
library('snow')
# prepare data
biz <- c(30, 0, 0, 50, 0, 20, 0, 0, 120, 0, 0, 0, 80, 0)
# model
m <- NA
cluster <- NA
chains <- 4
nodes <- 2
cluster <- makeCluster(spec = nodes,
type = "SOCK")
system.time (m <- jags.parfit(cl = cluster,
model = 'biz.bug',
data = list('biz' = biz),
inits = function()
list(p = 0.5,
a = 40,
b = 1,
choice = sapply(biz, function(x) ifelse(x>0, 1, 0))),
n.chains = chains,
n.adapt = 1000,
params = c('p', 'a', 'b'),
n.iter = 10000))
summary(m)
stopCluster(cluster)
setwd("~/GitHub/Spikes/rjags")
library('dclone')
library('rjags')
library('snow')
# prepare data
biz <- c(30, 0, 0, 50, 0, 20, 0, 0, 120, 0, 0, 0, 80, 0)
# model
m <- NA
cluster <- NA
chains <- 4
nodes <- 2
cluster <- makeCluster(spec = nodes,
type = "SOCK")
system.time (m <- jags.parfit(cl = cluster,
model = 'biz.bug',
data = list('biz' = biz),
inits = function()
list(p = 0.5,
a = 40,
b = 1,
choice = sapply(biz, function(x) ifelse(x>0, 1, 0))),
n.chains = chains,
n.adapt = 1000,
params = c('p', 'a', 'b'),
n.iter = 10000))
summary(m)
stopCluster(cluster)
source('~/GitHub/Spikes/rjags/biz2.R')
summary(m)
mean(biz)
plot(m)
library('dclone')
library('rjags')
library('snow')
# prepare data
# biz <- c(30, 0, 0, 50, 0, 20, 0, 0, 120, 0, 0, 0, 80, 0)
biz <- c(rep(11,0),
14,
0, 0,
34.5,
5,
25,
225,
0,0, 0,0,
90,
68.5,
0,
50,
0,0,0,
132,
0,0)
biz2 <- biz[biz>0]
zero <- length(biz) - length(biz2)
# model
m <- NA
cluster <- NA
chains <- 4
nodes <- 4
cluster <- makeCluster(spec = nodes,
type = "SOCK")
system.time (m <- jags.parfit(cl = cluster,
model = 'biz2.bug',
data = list('biz2' = biz2,
'zero' = zero),
n.chains = chains,
n.adapt = 1000,
params = c('p', 'a', 'b', 'm'),
n.iter = 10000))
summary(m)
stopCluster(cluster)
30*50
biz[11:end]
biz[11:length(biz)]
68.5,
library('dclone')
library('rjags')
library('snow')
# prepare data
# biz <- c(30, 0, 0, 50, 0, 20, 0, 0, 120, 0, 0, 0, 80, 0)
biz <- c(rep(11,0),
14,
0, 0,
34.5,
5,
25,
225,
0,0, 0,0,
90,
68.5,
0,
50,
0,0,0,
132,
0,0)
biz <- biz[10:length(biz)]
biz2 <- biz[biz>0]
zero <- length(biz) - length(biz2)
# model
m <- NA
cluster <- NA
chains <- 4
nodes <- 4
cluster <- makeCluster(spec = nodes,
type = "SOCK")
system.time (m <- jags.parfit(cl = cluster,
model = 'biz2.bug',
data = list('biz2' = biz2,
'zero' = zero),
n.chains = chains,
n.adapt = 1000,
params = c('p', 'a', 'b', 'm'),
n.iter = 10000))
summary(m)
stopCluster(cluster)
biz
mean(biz)
biz <- c(rep(11,0),
14,
0, 0,
34.5,
5,
25,
225,
0,0, 0,0,
90,
68.5,
0,
50,
0,0,0,
132,
0,0)
mean(biz)
library('dclone')
library('rjags')
library('snow')
# prepare data
# biz <- c(30, 0, 0, 50, 0, 20, 0, 0, 120, 0, 0, 0, 80, 0)
biz <- c(rep(0,11),
14,
0, 0,
34.5,
5,
25,
225,
0,0, 0,0,
90,
68.5,
0,
50,
0,0,0,
132,
0,0)
biz <- biz[10:length(biz)]
biz2 <- biz[biz>0]
zero <- length(biz) - length(biz2)
# model
m <- NA
cluster <- NA
chains <- 4
nodes <- 4
cluster <- makeCluster(spec = nodes,
type = "SOCK")
system.time (m <- jags.parfit(cl = cluster,
model = 'biz2.bug',
data = list('biz2' = biz2,
'zero' = zero),
n.chains = chains,
n.adapt = 1000,
params = c('p', 'a', 'b', 'm'),
n.iter = 10000))
summary(m)
stopCluster(cluster)
library('dclone')
library('rjags')
library('snow')
# prepare data
# biz <- c(30, 0, 0, 50, 0, 20, 0, 0, 120, 0, 0, 0, 80, 0)
biz <- c(rep(0,11),
14,
0, 0,
34.5,
5,
25,
225,
0,0, 0,0,
90,
68.5,
0,
50,
0,0,0,
132,
0,0)
#biz <- biz[10:length(biz)]
biz2 <- biz[biz>0]
zero <- length(biz) - length(biz2)
# model
m <- NA
cluster <- NA
chains <- 4
nodes <- 4
cluster <- makeCluster(spec = nodes,
type = "SOCK")
system.time (m <- jags.parfit(cl = cluster,
model = 'biz2.bug',
data = list('biz2' = biz2,
'zero' = zero),
n.chains = chains,
n.adapt = 1000,
params = c('p', 'a', 'b', 'm'),
n.iter = 10000))
summary(m)
stopCluster(cluster)
library('dclone')
library('rjags')
library('snow')
# prepare data
# biz <- c(30, 0, 0, 50, 0, 20, 0, 0, 120, 0, 0, 0, 80, 0)
biz <- c(rep(0,11),
14,
0, 0,
34.5,
5,
25,
225,
0,0, 0,0,
90,
68.5,
0,
50,
0,0,0,
132,
0,0)
biz <- biz[15:length(biz)]
biz2 <- biz[biz>0]
zero <- length(biz) - length(biz2)
# model
m <- NA
cluster <- NA
chains <- 4
nodes <- 4
cluster <- makeCluster(spec = nodes,
type = "SOCK")
system.time (m <- jags.parfit(cl = cluster,
model = 'biz2.bug',
data = list('biz2' = biz2,
'zero' = zero),
n.chains = chains,
n.adapt = 1000,
params = c('p', 'a', 'b', 'm'),
n.iter = 10000))
summary(m)
stopCluster(cluster)
