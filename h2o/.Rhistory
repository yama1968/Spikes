byrow = FALSE,
ncol = 4)
candidates
source('~/.active-rstudio-document', echo=TRUE)
i=4
candidates[,4]
candidates[,4] %*% candidates[,4]
candidates[,4] %*% first
m = matrix(c(1,1,
2,2,
3,4),
nrow = 3, byrow = TRUE)
m
m = matrix(c(1,1,
2,2,
3,4),
nrow = 2, byrow = TRUE)
m
m = matrix(c(1,1,
2,2,
3,4),
nrow = 2, byrow = FALSE)
m
svd(m)
?svd
m = matrix(c(1,1,
2,2,
3,4),
nrow = 3, byrow = TRUE)
m
svd(m)
m = matrix(c(1,1,
2,2,
3,4),
nrow = 3, byrow = TRUE)
m
r = svd(m)
r$u %*% diag(r$d)
new_matrix = m %*% t(m)
new_matrix
library("acepack", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.1")
install.packages(c("highr", "httpuv", "R6", "RcppArmadillo", "rgl", "RSQLite", "sqldf"))
pinv
ginv
library(MASS)
m=matrix(c(1,0,0, 0, 2,0, 0,0,0), nrow=3)
m
ginv(m)
system.time( {df=read.csv("/tmp/foo")})
require(data.table)
system.time( {df=read.table("/tmp/foo")})
system.time( {df=fread("/tmp/foo")})
View(df)
whos
who
object.size(df)
require(devtools)
install.packages("devtools")
require(devtools)
install_github('xgboost','tqchen',subdir='R-package')
require(xgboost)
install.packages(c("extraTrees", "sqldf"))
l=list
l=list()
l["a"]=1
l["b"]=2
l
l[["a"]]
l["a"]
g=list(x=l)
g[[x]]
g[["x"]]
g[["x"]][["a"]]
install.packages("RSofia")
df=data.frame(1=c(1,2))
df=data.frame("1"=c(1,2))
df["1",]
df[,"1"]
df
df[,"X1"]
df=data.frame(_1=c(1,2,3))
df=data.frame("_1"=c(1,2,3))
df=data.frame("_1"=c(1,2,3), X1=c(1,2,3))
df
foo=open("/tmp/foo.txt")
foo=file("/tmp/foo.txt")
writeLines("aa", foo)
writeLines("bb", foo)
close(foo)
foo=file("/tmp/foo.txt")
writeLines("bb", foo, append=TRUE)
write("bb", foo, append=TRUE)
write("aa", foo, append=TRUE)
write("00", foo, append=TRUE)
close(foo)
sink("/tmp/foo.txt")
cat("hello")
cat("boy")
cat("and girls")
sink()
sink("/tmp/foo.txt")
cat("hello\n")
cat("boy\n")
cat("and girls\n")
sink()
1+1
install.packages("bartMachine")
install.packages(c("amap", "Amelia", "BH", "biclust", "BradleyTerry2", "cairoDevice", "car", "caret", "checkpoint", "cluster", "clusterSim", "colorspace", "CORElearn", "corrgram", "devtools", "digest", "diptest", "doBy", "dplyr", "effects", "extraTrees", "fields", "flexmix", "Formula", "futile.logger", "gbm", "ggplot2", "gplots", "gWidgetsRGtk2", "Hmisc", "httr", "ipred", "jsonlite", "kernlab", "KernSmooth", "knitr", "lambda.r", "lava", "lazyeval", "LiblineaR", "magrittr", "manipulate", "mboost", "multcomp", "mvtnorm", "NbClust", "party", "prabclus", "prodlim", "proxy", "quantmod", "quantreg", "rattle", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RCurl", "reshape2", "rgl", "rmarkdown", "R.methodsS3", "RMySQL", "robustbase", "ROCR", "R.oo", "rpart", "rpart.plot", "rstudioapi", "RUnit", "R.utils", "RWeka", "RWekajars", "seriation", "SparseM", "stabs", "swirl", "TH.data", "tidyr", "TSP", "UsingR", "verification", "zoo"))
options(java.parameters = "-Xmx5000m")
library("bartMachine")
set_bart_machine_num_cores(4)
data(automobile)
automobile = na.omit(automobile)
y<-automobile$log_price
X<-automobile
X$log_price=NULL
X
str(X)
str(y)
View(X)
bt = bartMachine(X,y)
bt
plot(bt)
k_fold_cv(X,y,k_folds = 10)
rmse_by_num_trees(bt,num_replicates = 20)
bart_machine_cv <- bartMachineCV(X, y)
bart_machine_cv
investigate_var_importance(bart_machine_cv, num_replicates_for_avg = 20)
install.packages("TraMineR")
mvad.alphabet <- c("employment", "FE", "HE", "joblessness", "school",
"training")
mvad.labels <- c("employment", "further education", "higher education",
"joblessness", "school", "training")
mvad.scodes <- c("EM", "FE", "HE", "JL", "SC", "TR")
mvad.seq <- seqdef(mvad, 17:86, alphabet = mvad.alphabet, states = mvad.scodes,
labels = mvad.labels, xtstep = 6)
library(TraMineR)
data(mvad)
seqstatl(mvad[, 17:86])
mvad.alphabet <- c("employment", "FE", "HE", "joblessness", "school",
"training")
mvad.labels <- c("employment", "further education", "higher education",
"joblessness", "school", "training")
mvad.scodes <- c("EM", "FE", "HE", "JL", "SC", "TR")
mvad.seq <- seqdef(mvad, 17:86, alphabet = mvad.alphabet, states = mvad.scodes,
labels = mvad.labels, xtstep = 6)
ar(mfrow = c(2, 2))
par(mfrow = c(2, 2))
seqiplot(mvad.seq, withlegend = FALSE, border = NA)
seqiplot(mvad.seq, withlegend = FALSE)
seqiplot(mvad.seq)
seqIplot(mvad.seq, sortv = "from.start", withlegend = FALSE)
install.packages(c("pec", "rSFA", "party"))
install.packages("manipulate")
install.packages("randomForestSRC")
library(randomForestSRC)
data(veteran)
ntree<-1000
v.out<-rsf
rsf
v.out <-rsfrc
rfsrc
v.out <-rfsrc(Survrsf(time,status)~karno, data=veteran, ntree=ntree, forest=T)
View(veteran)
v.out <-rfsrc(Surv(time,status)~karno, data=veteran, ntree=ntree, forest=T)
v.out
summary(v.out)
v.out <-rfsrc(Surv(time,status)~karno+age+prior+celltype, data=veteran, ntree=ntree, forest=T)
summary(v.out)
v.out
require(randomForestSRC)
data("pbc")
pbc.f = as.formula("Surv(days,status)~.")
pbc.out = rfsrc(pbc.f, pbc, ntree = 1000,
splitrule = "logrankapprox", forest = T)
plot(pbc.out)
require(randomForestSRC)
data("pbc")
pbc.f = as.formula("Surv(days,status)~.")
pbc.out = rfsrc(pbc.f, pbc, ntree = 1000,
splitrule = "logrankscore", forest = T)
plot(pbc.out)
str(pbc.out)
pbc.out$importance
str(pbc.out$importance)
pbc.out$importance$age
(pbc.out$importance)$age
(pbc.out$importance)["age"]
pbc.out
pbc2.out = rfsrc(Surv(days,status)~.-ascites-treatment-spiders-edema-sex,
pbc, ntree = 1000,
splitrule = "logrankscore", forest = T)
pbc2.out
plot(pbc2.out)
plot.variable(pbc.out,3,partial=T,n.pred=6)
plot.variable.rfsrc(pbc.out,3,partial=T,n.pred=6)
str(pbc.out)
imp = pbc.out$importance
pnames = pbc.out$xvar.names
pnames.order = pnames[rev(order(imp))]
pnames
ntree=1000
imp = pbc.out$importance
pnames = pbc.out$xvar.names
pnames.order = pnames[rev(order(imp))]
n.pred = length(pnames.order)
pbc.err = rep(0, n.pred)
for (k in 1:n.pred){
rsf.f = "Surv(days,status)~"
rsf.f = as.formula(paste(rsf.f,
paste(pnames.order[1:k], collapse="+")))
pbc.err[k] = rfsrc(rsf.f, pbc, ntree = ntree,
splitrule = "logrankscore")$err.rate[ntree]
}
pbc.imp.out = aas.data.frame(
cbind(round(rev(sort(imp)),4),
round(pbc.err,4),
round(-diff(c(0.5,pbc.err)),4));
row.names = pnames.order)
colnames(pbc.imp.out) = c("Imp", "Err", "Drop Err")
print(pbc.imp.out)
pbc.imp.out = aas.data.frame(
cbind(round(rev(sort(imp)),4),
round(pbc.err,4),
round(-diff(c(0.5,pbc.err)),4)),
row.names = pnames.order)
colnames(pbc.imp.out) = c("Imp", "Err", "Drop Err")
print(pbc.imp.out)
pbc.imp.out = as.data.frame(
cbind(round(rev(sort(imp)),4),
round(pbc.err,4),
round(-diff(c(0.5,pbc.err)),4)),
row.names = pnames.order)
colnames(pbc.imp.out) = c("Imp", "Err", "Drop Err")
print(pbc.imp.out)
equire(randomForestSRC)
data("pbc")
pbc.f = as.formula("Surv(days,status)~.")
pbc.out = rfsrc(pbc.f, pbc, ntree = 1000,
splitrule = "logrankscore", forest = T)
plot(pbc.out)
pbc2.out = rfsrc(Surv(days,status)~.-ascites-treatment-spiders-edema-sex,
pbc, ntree = 1000,
splitrule = "logrankscore", forest = T)
require(randomForestSRC)
data("pbc")
pbc.f = as.formula("Surv(days,status)~.")
pbc.out = rfsrc(pbc.f, pbc, ntree = 1000,
splitrule = "logrankscore", forest = T)
plot(pbc.out)
pbc2.out = rfsrc(Surv(days,status)~.-ascites-treatment-spiders-edema-sex,
pbc, ntree = 1000,
splitrule = "logrankscore", forest = T)
ntree=1000
imp = pbc.out$importance
pnames = pbc.out$xvar.names
pnames.order = pnames[rev(order(imp))]
n.pred = length(pnames.order)
pbc.err = rep(0, n.pred)
for (k in 1:n.pred){
rsf.f = "Surv(days,status)~"
rsf.f = as.formula(paste(rsf.f,
paste(pnames.order[1:k], collapse="+")))
pbc.err[k] = rfsrc(rsf.f, pbc, ntree = ntree,
splitrule = "logrankscore")$err.rate[ntree]
}
pbc.imp.out = as.data.frame(
cbind(round(rev(sort(imp)),4),
round(pbc.err,4),
round(-diff(c(0.5,pbc.err)),4)),
row.names = pnames.order)
colnames(pbc.imp.out) = c("Imp", "Err", "Drop Err")
print(pbc.imp.out)
ntree=3000
imp = pbc.out$importance
pnames = pbc.out$xvar.names
pnames.order = pnames[rev(order(imp))]
n.pred = length(pnames.order)
pbc.err = rep(0, n.pred)
for (k in 1:n.pred){
rsf.f = "Surv(days,status)~"
rsf.f = as.formula(paste(rsf.f,
paste(pnames.order[1:k], collapse="+")))
pbc.err[k] = rfsrc(rsf.f, pbc, ntree = ntree,
splitrule = "logrankscore")$err.rate[ntree]
}
pbc3.imp.out = as.data.frame(
cbind(round(rev(sort(imp)),4),
round(pbc.err,4),
round(-diff(c(0.5,pbc.err)),4)),
row.names = pnames.order)
colnames(pbc3.imp.out) = c("Imp", "Err", "Drop Err")
print(pbc3.imp.out)
x=rfsrc(Surv(days,status)~bili+copper+albumin+prothrombin+sgot+age, splitrule="logrank",)
x=rfsrc(Surv(days,status)~bili+copper+albumin+prothrombin+sgot+age, veteran, splitrule="logrank",
ntree=3000)
x=rfsrc(Surv(days,status)~bili+copper+albumin+prothrombin+sgot+age, pbc, splitrule="logrank",
ntree=3000)
x
plot(x)
x$err.rate
plot(x$err.rate[1000:3000]
)
source("http://www.math.ntnu.no/inla/givemeINLA.R")
install.packages(INLA)
install.packages(inla)
inla.update()
inla.upgrade
inla.upgrade()
install.packages("runjags")
?runjags
??runjags
install.packages("dclone")
??dclone
source('/home2/yannick2/github/Spikes/R_survival/cox_companion.R', echo=TRUE)
source('/home2/yannick2/github/Spikes/R_survival/cox_companion.R', echo=TRUE)
source('/home2/yannick2/github/Spikes/R_survival/cox_companion.R', echo=TRUE)
source('/home2/yannick2/github/Spikes/R_survival/cox_companion.R', echo=TRUE)
source('/home2/yannick2/github/Spikes/R_survival/cox_companion.R', echo=TRUE)
source('/home2/yannick2/github/Spikes/R_survival/cox_companion.R', echo=TRUE)
source('/home2/yannick2/github/Spikes/Installs/R.install.packages.R', echo=TRUE)
source('/home2/yannick2/github/Spikes/rjags/bugs book/sp2_linreg.R', echo=TRUE)
source('/home2/yannick2/github/Spikes/rjags/bugs book/sp2_linreg.R', echo=TRUE)
source('/home2/yannick2/github/Spikes/rjags/bugs book/sp2_linreg.R', echo=TRUE)
source('/home2/yannick2/github/Spikes/rjags/bugs book/sp2_linreg.R', echo=TRUE)
plot(x,y)
source('/home2/yannick2/github/Spikes/rjags/bugs book/sp2_linreg.R', echo=TRUE)
plot(x,y)
mean(x)
mean(y)-mean(x)
source('/home2/yannick2/github/Spikes/rjags/bugs book/sp2_linreg.R', echo=TRUE)
plot(x,y)
source('/home2/yannick2/github/Spikes/rjags/bugs book/sp2_linreg.R', echo=TRUE)
plot(x,y)
rbern
source('/home2/yannick2/github/Spikes/rjags/bugs book/sp2_linreg.R', echo=TRUE)
source('/home2/yannick2/github/Spikes/rjags/bugs book/sp2_linreg.R', echo=TRUE)
source('/home2/yannick2/github/Spikes/h2o/run.h2o.R', echo=TRUE)
setwd("/home2/yannick2/github/Spikes/h2o")
source('/home2/yannick2/github/Spikes/h2o/run.h2o.R', echo=TRUE)
system.time (
#         deep <- h2o.deeplearning(x = x, y = y,
#                                  training_frame = training_frame,
#                                  activation = "RectifierWithDropout",
#                                  epochs = 500,
#                                  hidden = c(500, 500, 500),
#                                  seed = 1234
#                                  )
deep <- h2o.deeplearning(x = x, y = y,
epochs = c(10, 30, 60, 100),
activation = "RectifierWithDropout",
training_frame = training_frame,
#                                  hidden = list(c(50, 50), c(200,200),
#                                         c(50, 50, 50), c(200,200,200)),
hidden = c(50,50,50),
seed = 1234)
)
pred.deep <- h2o.predict(deep, validation_frame)
labels.deep <- as.data.frame(validation_frame[,c(y)])[,1]
# Ensemble test AUC
AUC(predictions=as.data.frame(pred.deep$pred)[,1], labels=labels.deep)
# [1] 0.7340168
# [1] 0.7616866
system.time (
#         deep <- h2o.deeplearning(x = x, y = y,
#                                  training_frame = training_frame,
#                                  activation = "RectifierWithDropout",
#                                  epochs = 500,
#                                  hidden = c(500, 500, 500),
#                                  seed = 1234
#                                  )
deep <- h2o.deeplearning(x = x, y = y,
epochs = list(10, 30, 60, 100),
activation = "RectifierWithDropout",
training_frame = training_frame,
#                                  hidden = list(c(50, 50), c(200,200),
#                                         c(50, 50, 50), c(200,200,200)),
hidden = c(50,50,50),
seed = 1234)
)
pred.deep <- h2o.predict(deep, validation_frame)
labels.deep <- as.data.frame(validation_frame[,c(y)])[,1]
# Ensemble test AUC
AUC(predictions=as.data.frame(pred.deep$pred)[,1], labels=labels.deep)
# [1] 0.7340168
# [1] 0.7616866
system.time (
#         deep <- h2o.deeplearning(x = x, y = y,
#                                  training_frame = training_frame,
#                                  activation = "RectifierWithDropout",
#                                  epochs = 500,
#                                  hidden = c(500, 500, 500),
#                                  seed = 1234
#                                  )
deep <- h2o.deeplearning(x = x, y = y,
epochs = 60,
activation = "RectifierWithDropout",
training_frame = training_frame,
hidden = c(50,50,50),
seed = 1234)
)
pred.deep <- h2o.predict(deep, validation_frame)
labels.deep <- as.data.frame(validation_frame[,c(y)])[,1]
# Ensemble test AUC
AUC(predictions=as.data.frame(pred.deep$pred)[,1], labels=labels.deep)
# [1] 0.7340168
# [1] 0.7616866
system.time (
#         deep <- h2o.deeplearning(x = x, y = y,
#                                  training_frame = training_frame,
#                                  activation = "RectifierWithDropout",
#                                  epochs = 500,
#                                  hidden = c(500, 500, 500),
#                                  seed = 1234
#                                  )
deep <- h2o.deeplearning(x = x, y = y,
epochs = 30,
activation = "RectifierWithDropout",
training_frame = training_frame,
hidden = c(50,50),
seed = 1234)
)
pred.deep <- h2o.predict(deep, validation_frame)
labels.deep <- as.data.frame(validation_frame[,c(y)])[,1]
# Ensemble test AUC
AUC(predictions=as.data.frame(pred.deep$pred)[,1], labels=labels.deep)
# [1] 0.7340168
# [1] 0.7616866
system.time (
#         deep <- h2o.deeplearning(x = x, y = y,
#                                  training_frame = training_frame,
#                                  activation = "RectifierWithDropout",
#                                  epochs = 500,
#                                  hidden = c(500, 500, 500),
#                                  seed = 1234
#                                  )
deep <- h2o.deeplearning(x = x, y = y,
epochs = 40,
activation = "RectifierWithDropout",
training_frame = training_frame,
hidden = c(50,50),
seed = 1234)
)
pred.deep <- h2o.predict(deep, validation_frame)
labels.deep <- as.data.frame(validation_frame[,c(y)])[,1]
# Ensemble test AUC
AUC(predictions=as.data.frame(pred.deep$pred)[,1], labels=labels.deep)
# [1] 0.7340168
# [1] 0.7616866
system.time (
#         deep <- h2o.deeplearning(x = x, y = y,
#                                  training_frame = training_frame,
#                                  activation = "RectifierWithDropout",
#                                  epochs = 500,
#                                  hidden = c(500, 500, 500),
#                                  seed = 1234
#                                  )
deep <- h2o.deeplearning(x = x, y = y,
epochs = 80,
activation = "RectifierWithDropout",
training_frame = training_frame,
hidden = c(50,50),
seed = 1234)
)
pred.deep <- h2o.predict(deep, validation_frame)
labels.deep <- as.data.frame(validation_frame[,c(y)])[,1]
# Ensemble test AUC
AUC(predictions=as.data.frame(pred.deep$pred)[,1], labels=labels.deep)
# [1] 0.7340168
# [1] 0.7616866
system.time (
#         deep <- h2o.deeplearning(x = x, y = y,
#                                  training_frame = training_frame,
#                                  activation = "RectifierWithDropout",
#                                  epochs = 500,
#                                  hidden = c(500, 500, 500),
#                                  seed = 1234
#                                  )
deep <- h2o.deeplearning(x = x, y = y,
epochs = 80,
activation = "RectifierWithDropout",
training_frame = training_frame,
hidden = c(80,80),
seed = 1234)
)
pred.deep <- h2o.predict(deep, validation_frame)
labels.deep <- as.data.frame(validation_frame[,c(y)])[,1]
# Ensemble test AUC
AUC(predictions=as.data.frame(pred.deep$pred)[,1], labels=labels.deep)
# [1] 0.7340168
# [1] 0.761686
system.time (
#         deep <- h2o.deeplearning(x = x, y = y,
#                                  training_frame = training_frame,
#                                  activation = "RectifierWithDropout",
#                                  epochs = 500,
#                                  hidden = c(500, 500, 500),
#                                  seed = 1234
#                                  )
deep <- h2o.deeplearning(x = x, y = y,
epochs = 80,
activation = "RectifierWithDropout",
training_frame = training_frame,
hidden = c(40, 40),
seed = 1234)
)
pred.deep <- h2o.predict(deep, validation_frame)
labels.deep <- as.data.frame(validation_frame[,c(y)])[,1]
# Ensemble test AUC
AUC(predictions=as.data.frame(pred.deep$pred)[,1], labels=labels.deep)
# [1] 0.7340168
# [1] 0.7616866
